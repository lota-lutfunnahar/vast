name: Nix
on:
  workflow_call:
    inputs:
      config:
        type: string
        required: true

permissions:
  contents: read
  id-token: write
  packages: write

jobs:
  vast:
    name: VAST
    runs-on: ubuntu-20.04
    steps:
      - name: Prevent pushing protected editions to public repos
        run: |
          # Create 'name registry' pairs
          jq -r '.editions[] | select(."image-registries" | length > 0) | .name as $name | ."image-registries"[]? // ."image-registries" | [ $name, . ] | join(" ")' \
            <<< '${{ inputs.config }}' | while read -r name registry; do
            # Explicitly allow open source images.
            [[ "${name}" =~ ^vast$ ]] && continue
            # Explicitly allow private registries.
            [[ "${registry}" == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" ]] && continue
            echo "::error Pushing ${name} to ${registry} is forbidden"
            exit 1
          done
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure
        id: cfg
        run: |
          # Configure
          echo '::notice triggered by: ${{ github.event_name }}'
          echo '::notice inputs = ${{ toJSON(fromJSON(inputs.config)) }}'
          echo "::notice checking registries..."
          echo "needs-docker-hub=false" >> "$GITHUB_OUTPUT"
          echo "needs-ecr=false" >> "$GITHUB_OUTPUT"
          jq -r '.editions | map( ."image-registries"[]) | unique | .[]
                 | if . == "docker.io" then
                     "needs-docker-hub=true"
                   elif . == "ghcr.io" then
                     "needs-ghcr=true"
                   elif . == "622024652768.dkr.ecr.eu-west-1.amazonaws.com" then
                     "needs-ecr=true"
                   else
                     empty
                   end
                 | @sh' \
                 <<< '${{ inputs.config }}' >> "${GITHUB_OUTPUT}"
          echo "::notice checking vast-plugins..."
          echo "needs-vast-plugins=false" >> "$GITHUB_OUTPUT"
          if [[ $(comm -12 \
                 <(jq -r '[(.editions[] | .name)] | sort | .[]' <<< '${{ inputs.config }}') \
                 <(echo vast-{ce,ee}| tr ' ' '\n' | sort)) \
          ]]; then
            echo "needs-vast-plugins=true" >> "$GITHUB_OUTPUT"
          fi
          jq '@sh "upload-to-github=\(.editions | any(."copy-package"))"' \
                   <<< '${{ inputs.config }}' >> "$GITHUB_OUTPUT"
      - name: Configure ssh-agent
        if: steps.cfg.outputs.needs-vast-plugins == 'true'
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VAST_PLUGINS_DEPLOY_KEY }}
      - name: Login to GitHub Container Registry
        if: steps.cfg.outputs.needs-ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: tenzir-bot
          password: ${{ secrets.TENZIR_BOT_GITHUB_TOKEN }}
      - name: Login to Docker Hub
        if: steps.cfg.outputs.needs-docker-hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Configure AWS Credentials
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::622024652768:role/ecr-vast-ce-github-access
          aws-region: eu-west-1
      - name: Login to AWS ECR
        if: steps.cfg.outputs.needs-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Install Nix
        uses: cachix/install-nix-action@v20
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: vast
          signingKey: "${{ secrets.CACHIX_VAST_SIGNING_KEY }}"
          pushFilter: "vast-ee"
      - name: Build Nix Packages
        env:
          RCLONE_GCS_SERVICE_ACCOUNT_CREDENTIALS: ${{ secrets.GCS_SERVICE_ACCOUNT_CREDENTIALS }}
        run: |
          nix shell \
            nixpkgs#git \
            nixpkgs#nushell \
            nixpkgs#rclone \
            nixpkgs#skopeo \
            -c .github/workflows/nix.nu '${{ inputs.config }}'
      - name: Upload Tarball to Github
        if: steps.cfg.outputs.upload-to-github
        uses: actions/upload-artifact@v3
        with:
          name: tarball
          path: "./packages/tarball"
          if-no-files-found: ignore
      - name: Upload Debian Package to Github
        if: steps.cfg.outputs.upload-to-github
        uses: actions/upload-artifact@v3
        with:
          name: debian
          path: "./packages/debian"
          if-no-files-found: ignore
      - name: Delete Release Assets
        if: github.event_name == 'release' && steps.cfg.outputs.upload-to-github
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          # don't fail if no previous assets exist
          fail-if-no-assets: false
          # only delete assets when `tag` refers to a release
          fail-if-no-release: true
          assets: |
            "vast-linux-static.deb"
            "vast-linux-static.tar.gz"
      - name: Upload Debian Release Package
        if: github.event_name == 'release' && steps.cfg.outputs.upload-to-github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "release/tarball/vast-linux-static.deb"
          # The asset name is constant so we can permanently link to
          # https://github.com/tenzir/vast/releases/latest/download/vast-linux-static.deb
          # for a build of the latest release.
          asset_name: "vast-linux-static.deb"
          asset_content_type: application/vnd.debian.binary-package
      - name: Upload Release Tarball
        if: github.event_name == 'release' && steps.cfg.outputs.upload-to-github
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "release/tarball/vast-linux-static.tar.gz"
          # The asset name is constant so we can permanently link to
          # https://github.com/tenzir/vast/releases/latest/download/vast-linux-static.tar.gz
          # for a build of the latest release.
          asset_name: "vast-linux-static.tar.gz"
          asset_content_type: application/gzip
